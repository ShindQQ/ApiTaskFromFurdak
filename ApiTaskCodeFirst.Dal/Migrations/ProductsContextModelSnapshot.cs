// <auto-generated />
using System;
using ApiTaskCodeFirst.Dal.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiTaskCodeFirst.Dal.Migrations
{
    [DbContext(typeof(ProductsContext))]
    partial class ProductsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Design")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GuaranteeInMonths")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductSeason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductSeasons");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductCategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductCategory");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", b =>
                {
                    b.HasOne("ApiTaskCodeFirst.Dal.Entities.Product", "Product")
                        .WithOne("Attribute")
                        .HasForeignKey("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductMaterial", b =>
                {
                    b.HasOne("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("Materials")
                        .HasForeignKey("ProductAttributeId");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductSeason", b =>
                {
                    b.HasOne("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("Seasons")
                        .HasForeignKey("ProductAttributeId");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductSize", b =>
                {
                    b.HasOne("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductAttributeId");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ProductProductCategory", b =>
                {
                    b.HasOne("ApiTaskCodeFirst.Dal.Entities.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("ProductCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiTaskCodeFirst.Dal.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.Product", b =>
                {
                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("ApiTaskCodeFirst.Dal.Entities.ProductAttribute", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Seasons");

                    b.Navigation("Sizes");
                });
#pragma warning restore 612, 618
        }
    }
}
